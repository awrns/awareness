<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?> <!-- used by XSLT processors -->
<!-- OPTIONS, known as processing instructions (PIs) go here. -->
<!-- For a complete list and description of PIs,
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable PIs that most I-Ds might want to use. -->
<?rfc strict="yes" ?> <!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC): -->
<?rfc toc="yes"?> <!-- generate a ToC -->
<?rfc tocdepth="3"?> <!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references: -->
<?rfc symrefs="yes"?> <!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?> <!-- sort the reference entries alphabetically -->
<!-- control vertical white space: 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no" ?> <!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?> <!-- keep one blank line between list items -->
<!-- end of popular PIs -->
<rfc  category="exp" docName="draft-cullen-awareness-00" ipr="trust200902">
  <front>
    <title abbrev="AP0">Awareness Protocol v0 (AP0): A Theory and System for the Interpretation and Distribution of Network-Accessible Functionality</title>
    <author fullname="Aedan Cullen" initials="A." surname="Cullen">
<!-- <organization/> -->
      <address>
        <!-- postal><street/><city/><region/><code/><country/></postal -->
<!-- <phone/> -->
<!-- <facsimile/> -->
      <email>aedancullen@gmail.com</email>
<!-- <uri/> -->
      </address>
    </author>
    <date year="2016" />
<!-- <area/> -->
<!-- <workgroup/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
    <abstract>
      <t>
          Awareness is a network ideology and protocol which attempts to generalize and address the difficulties of API continuity, functionality reuse, and service discovery in internet-connected applications. It proposes a novel architecture of information representation and processing between network-connected services, and defines methodology for computational configuration of relationships between operations on data.
      </t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
        this document are to be interpreted as described in
        <xref target="RFC2119"/>.
      </t>
      <t>
        At a high level, Awareness represents each available data-processing function available on the network as an independent node with its own set of numerical inputs and outputs. Each node additionally maintains a directory of other nodes whose functionality is accessible. The network's goal is to collaboratively utilize the communication resources and computational ability of other accessible nodes to effectively assemble a processing pathway for the solution of a problem. A node may access the functinoality of other nodes in its directory (e.g. provide it with input and receive its output), ask a node in its directory to search for an optimal assignment of sample data to its inputs in order to produce desired outputs, or request that a node in its directory investigate the functionality of other known nodes in order to assemble a pipeline that meets the requirements of the requestor.
      </t>
      <t>
          This document first outlines the reasoning for suggestion of such an architecture, and then proceeds to specify a protocol for its use.
      </t>
    </section>
    <section anchor="SystemArchitecture" title="System Architecture">

        <t>
            This section overviews the structures and units of processing used in Awareness, and describes the features of each and their contribution to the entire functionality-distribution network.
        </t>


        <section anchor="DataRepresentation" title="Data Representation">
            <section anchor="Item" title="Item">
                <t>
                    The concept of Awareness is based on a very simple representation of data where each of the multiple parameters comprising a data point is stored as a floating-point value between 0.0 and 1.0, inclusive. A single data point, or item, is an array of one or more of these parameters. A data item's parameters carry meaning by their order, and are implicitly numerically indexed. Data items used for a specific purpose always maintain their parameter content and meaning (the number of parameters nor the parameter order does not change). Data items' parameters have 64-bit (double) precision. Although initially it might seem difficult to encode non-numeric data in such a representation, the practice of exclusively allowing a numerical representation makes data easier to be computationally understood by means of machine learning.
                </t>
            </section>
            <section anchor="Set" title="Set">
                <t>
                    It is often necessary to store and manipulate collections of data points, which are known as Sets. A Set provides the structure necessary to encode the input, state, and output of a Function over multiple iterations, and additionally can be used to model a new Function. It consists of three 'streams' of Items - one for input, one for state, and one for output. Within one stream, the number of parameters present in each Item contained in the stream must be equal. For example, a Set might have input Items all containing 4 parameters, state Items all containing 2 parameters, and output Items all containing 1 parameter. The number of Items contained in all three streams in a Set will be equal.
                </t>
            </section>
        </section>

        <section anchor="BlockStrucutre" title="Block Structure">

            <t>
                This section describes the abstractions used in an implementation of Awareness over a network.
            </t>

            <section anchor="Node" title="Node">
                <t>
                    A Node is a unit of network-connected functionality, which contains variable-length lists of Functions, Endpoints, Algorithms, and Assemblies. It maintains, through its list of Functions, one or more network-accessible operations on data. Through its list of Endpoints it stores information which can be used to contact other known Nodes over the network. Its Algorithms each manage a recursive search operation being performed over the Endpoints with which the Node is in contact, and its Assemblies store known pipelines of network-accessible data processing derived from such recursive search operations.
                </t>
            </section>
            <section anchor="Function" title="Function">
                <t>
                    A Function is representative of one locally-implemented, but network-accessible operation on data. A Function takes data as input, modifies its state as the data is processed, and provides data as output. Each of the three uses of data (input, state, and output) necessary within a Function is manipulated as an Item with a specific number of parameters. Therefore, a given Function has a unchanging input data 'size' (number of Item parameters), an unchanging state data 'size', and an unchanging output data 'size'. A Function provides the ability for state data to be read or written, and for input data to be provided in exchange for output data. It is expected that Functions use state data as a mechanism for recurrent processing, where output is not only derived from input but also from a previous state.
                </t>
            </section>
            <section anchor="Endpoint" title="Endpoint">
                <t>
                    An Endpoint is very similar in operation to a Function, with the exception that it refers to a Function accessible over the network rather than implemented locally. However, it also provides the same ability for state data to be read or written, and for input data to be exchanged for output data. In this way an Endpoint additionally serves the purpose of a network client, and as such must also store the IP address and port at which the remote Node to which it refers can be accessed. Finally, an Endpoint provides the ability to be connected or disconnected to the remote Node.
                </t>
            </section>
            <section anchor="Algorithm" title="Algorithm">
                <t>
                    An Algorithm provides the recursive search method that is described in more detail in the Processing Analysis section. In summary, it is provided with a Set for which a suitable Assembly must be created (that as closely as possible models the inputs, states, and outputs of the Items of the Set), a recursion limit, and a time limit within which the process must be completed.
                </t>
            </section>
            <section anchor="Assembly" title="Assembly">
            </section>
        </section>

        <section anchor="AdditionalFunctionality" title="Additional Functionality">
            <section anchor="Protocol" title="Protocol">
            </section>
            <section anchor="Fabricator" title="Fabricator">
            </section>
        </section>

    </section>
    <section anchor="ProcessingAnalysis" title="Processing Analysis">
    </section>
    <section anchor="ProtocolVocabulary" title="Protocol Vocabulary">
        <section anchor="ProtocolDataUnit" title="Protocol Data Unit">

            <texttable anchor="ProtocolDataUnitFormat" title="Protocol Data Unit Format">
                <ttcol align='center'>1B</ttcol>
                <ttcol align='center'>1B</ttcol>
                <ttcol align='center'>1B</ttcol>
                <ttcol align='center'>1B</ttcol>
                <ttcol align='center'>8B (64bit) unsigned integer</ttcol>
                <ttcol align='center'>(varies)</ttcol>
                <c>Version Byte</c>
                <c>Unit Type Byte</c>
                <c>Transmission Cause Type Byte</c>
                <c>Requested Response Type Byte</c>
                <c>Data Length Integer</c>
                <c>Data Bytes</c>
            </texttable>
            <section anchor="VersionByte" title="Version Byte">
                <t>
                    The Version Byte is representative of the version and format of the Awareness protocol in use, and is provided to ensure that integration of future protocol versions will be possible.
                </t>
                <t> 
                    The following conditions apply to transmission of the Version Byte:
                </t>
                <t>
                    The following conditions apply to reception of the Version Byte:
                </t>
            </section>
            <section anchor="UnitTypeByte" title="Unit Type Byte">
                <t>
                    The Unit Type Byte is representative of the parsing that should be enacted for the Data Bytes section of the specific Protocol Data Unit in which it occurs.
                </t>
                <t>
                    The following conditions apply to transmission of the Unit Type Byte:
                </t>
                <t>
                    The following conditions apply to reception of the Unit Type Byte:
                </t>
            </section>
            <section anchor="TransmissionCauseTypeByte" title="Transmission Cause Type Byte">
                <t>
                    The Transmission Cause Type Byte is representative of the Unit Type Byte of the Protocol Data Unit that was the cause of the sending of the Protocol Data Unit in which the Transmission Cause Type Byte occurs.
                </t>
                <t>
                    The following conditions apply to transmission of the Transmission Cause Type Byte:
                </t>
                <t>
                    The following conditions apply to reception of the Transmission Cause Type Byte:
                </t>
            </section>
            <section anchor="RequestedResponseTypeByte" title="Requested Response Type Byte">
                <t> 
                    The Requested Response Type Byte is representative of the Unit Type Byte of the Protocol Data Unit which the requesting node wishes to receive as a result of its transmission to the receiving node.
                </t>
                <t>
                    The following conditions apply to transmission of the Requested Response Type Byte:
                </t>
                <t>
                    The following conditions apply to reception of the Requested Response Type Byte:
                </t>
            </section>
            <section anchor="DataLengthInteger" title="Data Length Integer">
                <t>
                    The Data Length Integer is a 64-bit unsigned integer representative of the number of bytes to be sent in the following Data Bytes section of the Protocol Data Unit in which it occurs.
                </t>
                <t>
                    The following conditions apply to transmission of the Data Length Integer:
                </t>
                <t>
                    The following conditions apply to reception of the Data Length Integer:
                </t>
            </section>
            <section anchor="DataBytes" title="Data Bytes">
                <t>
                    The Data Bytes section is a flexible representation of the meaningful information transmitted by a Protocol Data Unit.
                </t>
                <t>
                    The following conditions apply to transmission of the Data Bytes:
                </t>
                <t>
                    The following conditions apply to reception of the Data Bytes:
                </t>
            </section>
        </section>
        <section anchor="DataUnitTypes" title="Data Unit Types">
            <section anchor="Nothing" title="Nothing">
                <t>
                    A Unit Type Byte equal to 0x00 specifies that the PDU in which it is received is of the Nothing type. A Nothing PDU's Data Bytes section contains no data.
                </t>
                <t>
                    The following conditions apply to transmission of a Nothing PDU:
                </t>
                <t>
                    The following conditions apply to reception of a Nothing PDU:
                </t>
            </section>
            <section anchor="SearchCategory" title="Search Category of Types">
                <section anchor="LocalSearch" title="Local Search">
                    <t>
                        A Unit Type Byte equal to 0x01 specifies that the PDU in which it is received is of the Local Search type.
                    </t>
                    <texttable anchor="DataBytesFormatfortheLocalSearchPDU" title="Data Bytes Format for the Local Search PDU">
                        <ttcol align='center'>1B</ttcol>
                        <ttcol align='center'>4B (32bit) unsigned integer</ttcol>
                        <c>Depth Limit</c>
                        <c>Timeout Milliseconds</c>
                    </texttable>
                    <t>
                        The following conditions apply to transmission of a Local Search PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Local Search PDU:
                    </t>
                </section>
                <section anchor="PropagatingSearch" title="Propagating Search">
                    <t>
                        A Unit Type Byte equal to 0x02 specifies that the PDU in which it is received is of the Propagating Search type.
                    </t>
                    <t>
                        The following conditions apply to transmission of a Propagating Search PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Propagating Search PDU:
                    </t>
                </section>
                <section anchor="SearchStatus" title="Search Status">
                    <t>
                        A Unit Type Byte equal to 0x03 specifies that the PDU in which it is received is of the Search Status type.
                    </t>
                    <t>
                        The following conditions apply to transmission of a Search Status PDU:
                    </t>
                    <t>
                        The following conditions apply to reception of a Search Status PDU:
                    </t>
                </section>
            </section>
            <section anchor="ProcessCategory" title="Process Category of Types">
                <section anchor="DataProcess" title="Data Process">
                    <t>
                        A Unit Type Byte equal to 0x04 specifies that the PDU in which it is received is of the Data Process type.
                    </t>
                    <t>
                        The following conditions apply to the transmission of a Data Process PDU:
                    </t>
                    <t>
                        The following conditions apply to the reception of a Data Process PDU:
                    </t>
                </section>
                <section anchor="ProcessStatus" title="Process Status">
                    <t>
                        A Unit Type Byte equal to 0x05 specifies that the PDU in which it is received is of the Process Status type.
                    </t>
                    <t>
                        The following conditions apply to the transmission of a Process Status PDU:
                    </t>
                    <t>
                        The following conditions apply to the reception of a Process Status PDU:
                    </t>
                </section>
            </section>
            <section anchor="PrimitiveCategory" title="Primitive Category of Types">
                <section anchor="ItemTransfer" title="Item Transfer">
                    <t>
                        A Unit Type Byte equal to 0x06 specifies that the PDU in which it is received is of the Item Transfer type.
                    </t>
                    <t>
                        The following conditions apply to the transmission of an Item Transfer PDU:
                    </t>
                    <t>
                        The following conditions apply to the reception of an Item Transfer PDU:
                    </t>
                </section>
                <section anchor="SetTransfer" title="Set Transfer">
                    <t>
                        A Unit Type Byte equal to 0x07 specifies that the PDU in which it is received is of the Set Transfer type.
                    </t>
                    <t>
                        The following conditions apply to the transmission of a Set Transfer PDU:
                    </t>
                    <t>
                        The following conditions apply to the reception of a Set Transfer PDU:
                    </t>
                </section>
                <section anchor="AssemblyTransfer" title="Assembly Transfer">
                    <t>
                        A Unit Type Byte equal to 0x08 specifies that the PDU in which it is received is of the Assembly Transfer type.
                    </t>
                    <t>
                        The following conditions apply to the transmission of an Assembly Transfer PDU:
                    </t>
                    <t>
                        The following conditions apply to the reception of an Assembly Tranfer PDU:
                    </t>
                </section>
            </section>
            <section anchor="ErrorCategory" title="Error Category of Types">
                <section anchor="UnfulfillableRequest" title="Unfulfillable Request">
                    <t>
                        A Unit Type Byte equal to 0x09 specifies that the PDU in which it is received is of the Unfulfillable Request type.
                    </t>
                    <t>
                        The following conditions apply to the transmission of an Unfulfillable Request PDU:
                    </t>
                    <t>
                        The following conditions apply to the reception of an Unfulfillable Request PDU:
                    </t>
                </section>
                <section anchor="NonsenseUnit" title="Nonsense Unit">
                    <t>
                        A Unit Type Byte equal to 0x10 specifies that the PDU in which it is received is of the Nonsense Unit type.
                    </t>
                    <t>
                        The following conditions apply to the transmission of a Nonsense Unit PDU:
                    </t>
                    <t>
                        The following conditions apply to the reception of a Nonsense Unit PDU:
                    </t>
                </section>
                <section anchor="NonsenseData" title="Nonsense Data">
                    <t>
                        A Unit Type Byte equal to 0x11 specifies that the PDU in which it is received is of the Nonsense Data type.
                    </t>
                    <t>
                        The following conditions apply to the transmission of a Nonsense Data PDU:
                    </t>
                    <t>
                        The following conditions apply to the reception of a Nonsense Data PDU:
                    </t>
                </section>
            </section>
        </section>
    </section>
    <section anchor="Security" title="Security Considerations">
    </section>
    <section anchor="IANA" title="IANA Considerations">
    </section>
    <section anchor="Acknowledgements" title="Acknowledgements">
    </section>
  </middle>
  <back>
    <references title="Normative References">
      &RFC2119;
    </references>
  </back>
</rfc>